// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                  @id @default(autoincrement())
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now()) @updatedAt
  email              String               @unique
  name               String
  password           String
  Follow             Follow[]
  Review             Review[]
  Message            Message[]
  Event              Event[]
  EventParticipation EventParticipation[]
  MarketItem         MarketItem[]
  ItemPurchase       ItemPurchase[]
  ItemBookmark       ItemBookmark[]
}

model Shop {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  title       String
  description String
  address     String
  imageURL    String?
  latitude    Float
  longitude   Float
  Follow      Follow[]
  Review      Review[]
  Message     Message[]
  ShopTag     ShopTag[]
  PhotoUpload PhotoUpload[]
}

model PhotoUpload {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  uploadPath String
  shop       Shop     @relation(fields: [shopId], references: [id])
  shopId     Int
}

model Follow {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  shop      Shop     @relation(fields: [shopId], references: [id])
  userId    Int
  shopId    Int

  @@unique([userId, shopId])
}

model Review {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  shop       Shop     @relation(fields: [shopId], references: [id])
  userId     Int
  shopId     Int
  content    String
  imageURL   String?
  starsGiven Int      @default(0)
  priceRange Int?
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  shop      Shop     @relation(fields: [shopId], references: [id])
  userId    Int
  shopId    Int
  message   String

  @@unique([userId, shopId])
}

model Tag {
  id      Int       @id @default(autoincrement())
  title   String
  ShopTag ShopTag[]
}

model ShopTag {
  id     Int  @id @default(autoincrement())
  tagId  Int
  shopId Int
  tag    Tag  @relation(fields: [tagId], references: [id])
  shop   Shop @relation(fields: [shopId], references: [id])
}

model Event {
  id                 Int                  @id @default(autoincrement())
  title              String
  createdAt          DateTime             @default(now())
  description        String?
  imageURL           String?
  startDate          DateTime
  author             User                 @relation(fields: [authorId], references: [id])
  authorId           Int
  EventParticipation EventParticipation[]
}

model EventParticipation {
  id        Int      @id @default(autoincrement())
  eventId   Int
  event     Event    @relation(fields: [eventId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model MarketItem {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now())
  sellerId     Int
  seller       User           @relation(fields: [sellerId], references: [id])
  price        Int
  description  String
  title        String
  size         String
  addInfo      String?
  active       Boolean        @default(true)
  image        String?
  ItemPurchase ItemPurchase[]
  ItemBookmark ItemBookmark[]
}

model ItemPurchase {
  id           Int        @id @default(autoincrement())
  buyerId      Int
  buyer        User       @relation(fields: [buyerId], references: [id])
  marketItemId Int
  marketItem   MarketItem @relation(fields: [marketItemId], references: [id])
  purchaseDate DateTime   @default(now())
}

model ItemBookmark {
  id           Int        @id @default(autoincrement())
  buyerId      Int
  buyer        User       @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  marketItemId Int
  marketItem   MarketItem @relation(fields: [marketItemId], references: [id], onDelete: Cascade)
}
